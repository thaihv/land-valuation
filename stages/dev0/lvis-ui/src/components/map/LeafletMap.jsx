import { useEffect, useRef, useState } from "react";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

export default function LeafletMap() {
  const mapContainer = useRef(null);
  const map = useRef(null);
  const center = { lng: 102.6, lat: 17.9667 };
  const [zoom] = useState(11);

  useEffect(() => {
    if (map.current) return; // stops map from intializing more than once

    var grid = new L.GridLayer();
    grid.createTile = function (coords) {
      var tile = L.DomUtil.create("canvas", "leaflet-tile");
      var ctx = tile.getContext("2d");
      var size = this.getTileSize();
      tile.width = size.x;
      tile.height = size.y;

      // calculate projection coordinates of top left tile pixel
      var nwPoint = coords.scaleBy(size);

      // calculate geographic coordinates of top left tile pixel
      var nw = map.current.unproject(nwPoint, coords.z);
      ctx.fillStyle = "white";
      ctx.fillRect(0, 0, size.x, 50);
      ctx.fillStyle = "black";
      ctx.fillText(
        "x: " + coords.x + ", y: " + coords.y + ", zoom: " + coords.z,
        20,
        20
      );
      ctx.fillText("lat: " + nw.lat + ", lon: " + nw.lng, 20, 40);
      ctx.strokeStyle = "red";
      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.lineTo(size.x - 1, 0);
      ctx.lineTo(size.x - 1, size.y - 1);
      ctx.lineTo(0, size.y - 1);
      ctx.closePath();
      ctx.stroke();
      return tile;
    };

    const osm = L.tileLayer(
      "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
      {
        attribution:
          '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      }
    );
    const openTopoMap = L.tileLayer(
      "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",
      {
        maxZoom: 19,
        attribution:
          "Map data: © OpenStreetMap contributors, SRTM | Map style: © OpenTopoMap (CC-BY-SA)",
      }
    );
    const provinces = L.tileLayer.wms(
      `${import.meta.env.VITE_GEOMAP_WMS_URL}`,
      {
        maxZoom: 20,
        layers: "lvis:province",
        transparent: true,
        styles: "provinces",
        format: "image/png",
        opacity: 0.6,
        attribution: "Map data: © Generated by Lao Land Valuation Team",
      }
    );

    const districts = L.tileLayer.wms(
      `${import.meta.env.VITE_GEOMAP_WMS_URL}`,
      {
        maxZoom: 20,
        layers: "lvis:district",
        transparent: true,
        styles: "districts",
        format: "image/png",
        opacity: 0.8,
        attribution: "Map data: © Generated by Lao Land Valuation Team",
      }
    );

    var baseMaps = {
      OpenStreetMap: osm,
    };
    var overlayMaps = {
      Province: provinces,
      District: districts,
      GridCell: grid,
    };

    map.current = new L.Map(mapContainer.current, {
      center: L.latLng(center.lat, center.lng),
      zoom: zoom,
      layers: [osm, provinces],
    });

    L.Control.Watermark = L.Control.extend({
      onAdd(map) {
        const img = L.DomUtil.create("img");
        img.src = "./monre.svg";
        img.style.width = "50px";

        return img;
      },
      onRemove(map) {},
    });

    L.control.watermark = function (opts) {
      return new L.Control.Watermark(opts);
    };
    const watermarkControl = L.control
      .watermark({ position: "bottomright" })
      .addTo(map.current);
    const layerControl = L.control
      .layers(baseMaps, overlayMaps)
      .addTo(map.current);
    layerControl.addBaseLayer(openTopoMap, "OpenTopoMap");
  }, [center.lng, center.lat, zoom]);

  return (
    <div className="map-wrap" style={{ height: "100%", zIndex: 0 }}>
      <div ref={mapContainer} className="map" />
    </div>
  );
}
